# Setup
# -----
# Create the rendezvous's for the tests

RULE set up rendezvous between commit and afterCompletion
CLASS SingleSessionConcurrencyTest
METHOD testMinimalProcess
AT ENTRY
IF NOT isRendezvous("afterCompletion", 2)
DO traceln("] created rendezvous [afterCompletion]: " + createRendezvous("afterCompletion", 2, true));
ENDRULE

RULE set up rendezvous between leaving sscs.execute and test
CLASS SingleSessionConcurrencyTest
METHOD testMinimalProcess
AT ENTRY
IF NOT isRendezvous("SSCS.execute", 2)
DO traceln("> created rendezvous [SSCS.execute]: " + createRendezvous("SSCS.execute", 2, true));
ENDRULE

# -----
#   Pause when leaving the SingleSessionCommandService.execute method
# in order to expose the race condition that can occur between: 
# 1. SingleSessionCommandService.execute(...)
# and 
# 2. SingleSessionCommandService$SynchronizationImpl.afterCompletion(...)
# 
# The SingleSessionConcurrencyTest.unpauseThread() method is called to allow
# the paused thread to continue

RULE pause after execute 
CLASS SingleSessionCommandService
METHOD execute
AT EXIT
IF isRendezvous("SSCS.execute", 2)
DO traceln("> |" + Thread.currentThread().getName() 
                + "| [SSCS.execute] SingleSessionCommandService.execute(..) completed and waiting for test");
traceln("> |" + Thread.currentThread().getName() 
              + "| [SSCS.execute] execute completed: " 
              + rendezvous("SSCS.execute"));
ENDRULE

RULE wait for execute to complete
CLASS SingleSessionConcurrencyTest
METHOD waitForExecuteMethodToComplete
AT ENTRY
IF isRendezvous("SSCS.execute", 2)
DO traceln("> |" + Thread.currentThread().getName() 
                + "| [SSCS.execute] called waitForExecuteMethodToComplete() ");
traceln("> |" + Thread.currentThread().getName() 
              + "| [SSCS.execute] finished waiting: " 
              + rendezvous("SSCS.execute"));
ENDRULE

# -----
#   Pause before the SingleSessionCommandService$SynchronizationImpl.afterCompletion(...)
# method (in order to allow another thread to do things in between the .afterCompletion(...)
# call and the end of the (synchronized) SingleSessionCommandService.execute(...) method.

RULE pause before afterCompletion
CLASS SingleSessionCommandService$SynchronizationImpl
METHOD afterCompletion
AT ENTRY
IF isRendezvous("afterCompletion", 2)
DO traceln("] |" + Thread.currentThread().getName() 
                 + "| [afterCompletion] waiting to enter SynchronizationImpl.afterCompletion(...)");
traceln("] |" + Thread.currentThread().getName() 
              + "| [afterCompletion] entering SynchronizationImpl.afterCompletion(...)): " 
              + rendezvous("afterCompletion"));
ENDRULE

RULE print afterCompletion
CLASS SingleSessionCommandService$SynchronizationImpl
METHOD afterCompletion
AT ENTRY
IF TRUE
DO traceln("] |" + Thread.currentThread().getName() + "| ENTER: SynchronizationImpl.afterCompletion(...)");
traceStack("ENTER: ");
ENDRULE

RULE print afterCompletion end
CLASS SingleSessionCommandService$SynchronizationImpl
METHOD afterCompletion
AT EXIT
IF TRUE
DO traceln("] |" + Thread.currentThread().getName() + "| EXIT: SynchronizationImpl.afterCompletion(...)");
traceStack("EXIT : ");
ENDRULE

RULE continue with afterCompletion call
CLASS SingleSessionConcurrencyTest
METHOD continueWithSynchronizationAfterCompletionMethod
AT ENTRY
IF isRendezvous("afterCompletion", 2)
DO traceln("] |" + Thread.currentThread().getName() 
                + "| [afterCompletion] test waiting to notify TX synchronization to finish afterCompletion(..) call" );
traceln("] |" + Thread.currentThread().getName() 
             + "| [afterCompletion] test continues: " 
             + rendezvous("afterCompletion"));
ENDRULE
